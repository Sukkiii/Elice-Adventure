function solution () {
  // 요구사항
  // 1. 2단~9단까지 [단] * [곱하는 수] = [결과]형식으로 출력하기
  // 2. 결괏값을 기준으로 오름차순 정렬하기(Array.sort),
  // 3. 결과값이 같다면, 단 수가 적은 식이 먼저 정렬
  
  const array = []; // [[단, 곱수, 결과값], ...]
  for (let 단=2; 단<=9; 단++) {
    for (let 곱수=1; 곱수<=9; 곱수++) {
      // console.log(`${단} * ${곱수} = ${단 * 곱수}`);
      const 결과값 = 단 * 곱수;
      array.push([단, 곱수, 결과값]);
    }
  }
  array.sort((a,b) => {
    const isSame = a[2] - b[2] === 0;
    if (isSame) {
      return a[0] - b[0];
    }
    return a[2] - b[2];
  });
  
  // const 단 = array[0][0];
  // const 곱수 = array[0][1];
  // const 결과값 = array[0][2];
  // console.log(rtn[0]);
  return array.map(item => `${item[0]} * ${item[1]} = ${item[2]}`).join('\n');
}

module.exports = solution;

// function solution() {
//   // 요구사항
//   // 1. 2단~9단까지 [단] * [곱하는 수] = [결과] 형식으로 출력하기
//   //   2 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   3 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   4 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   5 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   6 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   7 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   8 -> 1, 2, 3, 4, 5, 6, 7, 8, 9
//   //   9 -> 1, 2, 3, 4, 5, 6, 7, 8, 9

//   const rtn = []; // [[단, 곱하는수, 결괏값], ...]
//   for (let 단 = 2; 단 <= 9; 단++) {
//     for (let 곱하는수 = 1; 곱하는수 <= 9; 곱하는수++) {
//       const 결괏값 = 단 * 곱하는수;
//       rtn.push([단, 곱하는수, 결괏값]);
//     }
//   }

//   //   const 단 = rtn[0][0];
//   //   const 곱하는_수 = rtn[0][1];
//   //   const 결괏값 = rtn[0][2];

//   // 2. 결괏값을 기준으로 오름차순 정렬하기(Array.sort), 결괏값이 같을 경우 [단 수로 오름차순]
//   //   [[2, 1, 2], [2, 2, 4], [2, 3, 6], ...]
//   rtn.sort((a, b) => {
//     const isSame = a[2] - b[2] === 0;
//     if (isSame) {
//       return a[0] - b[0];
//     }
//     return a[2] - b[2];
//   });

//   // ["2 * 1 = 2", "3 * 1 = 3", ...]
//   return rtn.map(item => ${item[0]} * ${item[1]} = ${item[2]}).join('\n');
// }

// // 실행 혹은 제출을 위한 코드입니다. 지우거나 수정하지 말아주세요.
// module.exports = solution;